#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 19, 2018 03:08:20 PM CST  platform: Windows NT
#    Nov 19, 2018 03:09:39 PM CST  platform: Windows NT
#    Nov 19, 2018 03:55:46 PM CST  platform: Windows NT
#    Nov 19, 2018 05:25:43 PM CST  platform: Windows NT
#    Nov 21, 2018 06:02:02 PM CST  platform: Windows NT
#    Nov 21, 2018 06:08:34 PM CST  platform: Windows NT

import sys
import os
import re

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

# my own code
import sharevars
import features
import auxi

def set_Tk_var():
    global check_escape
    check_escape = tk.StringVar()
    print("Starting child window")

def quit_file_name_change(p1):
    print('filename_change_support.quit_file_name_change')
    print('p1 = {0}'.format(p1))
    destroy_window()
    sys.stdout.flush()

def change_file_names():
    print('filename_change_support.change_file_names')
    print("rename {cnt} files".format(cnt=len(sharevars.title_full_path_changes)))
    for old_path, new_path in sharevars.title_full_path_changes:
        try:
            if os.path.exists(new_path):
                print("Skip. There would be duplicates if renamed!-->{fn}".format(
                    fn=new_path
                ))
                continue

            # need change LibraryData accordingly. 
            if sharevars.global_lib_data.rename_file_in_df_entry(old_path, new_path):
                os.rename(old_path, new_path)
            else:
                print("Skip. There would be duplicate file name if renamed!-->{fn}".format(
                    fn=new_path
                ))
            
        except OSError as e:
            print(e)

    sys.stdout.flush()

def fill_treeview_with_list(tree_view, alist):
    all_iids = tree_view.get_children()
    for iid in list(all_iids):
        tree_view.delete(iid)

    for old, new in alist:
        tree_view.insert('', 'end', 
                text=old, values=[new])

import tkinter.messagebox

special_chars = '\.\(\)\[\]\*\?\+'

def contain_special_char(a_str):
    for ch in special_chars:
        if ch in a_str:
            return True

    return False

def preview_change():
    print('filename_change_support.preview_change')
    from_pattern = w.from_pattern_entry.get()
    to_pattern = w.to_pattern_entry.get()
    to_pattern_surfix = w.to_pattern_entry_surfix.get()
    print(from_pattern, '--->', to_pattern, ' surfix:', to_pattern_surfix)

    if check_escape.get() == "on":
        from_pattern = re.escape(from_pattern)
    else:
        if contain_special_char(from_pattern):
            tkinter.messagebox.showwarning("Input String",
                "The from string contains special character and may need escape: " + from_pattern,
                parent=root
                )

    a_df = sharevars.all_book_tree_view.get_dataframe()
    original_titles = zip(list(a_df['title']),
                            list(a_df['surfix']),
                            list(a_df['folder']))
    sharevars.title_changes = []
    sharevars.title_full_path_changes = []
    new_titles = set()
    for title, surfix, folder in original_titles:
        if re.search(from_pattern, title):
            new_title = re.sub(from_pattern, to_pattern, title)
            new_title = new_title+to_pattern_surfix
            if title == new_title:
                # no change at all. Ignore this.
                continue
                
            new_title_full_path = os.path.join(folder, new_title +'.'+surfix)
            new_titles.add(new_title_full_path)
            sharevars.title_changes.append((title, new_title))
            sharevars.title_full_path_changes.append(
                (
                os.path.join(folder, title +'.'+surfix),
                new_title_full_path
                )
            )
    
    fill_treeview_with_list(w.change_scrolledtreeview, sharevars.title_changes)

    auxi.set_count_in_entry(w.from_count_entry, len(sharevars.title_changes))
    auxi.set_count_in_entry(w.to_count_entry, len(new_titles))

    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    w.from_pattern_entry.insert(tk.END, sharevars.title_in_focus)
    w.to_pattern_entry.insert(tk.END, sharevars.title_in_focus)
    w.escape_checkbutton.select()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import filename_change
    filename_change.vp_start_gui()

